git学习
1.安装
2.git bath，输入git
3.命令
1)设置
	$git config --global user.name "yourname"
	$git config --global user.email "youremail"
2)创建版本库
	$mkdif learngit
	$cd learngit
	$pwd
	$git init
	创建一个readme.txt文件
	$git add readme.txt
	$git commit -m "message"
3)查看
	$git status 仓库当前的状态
	$git diff readme.txt 查看difference
4）版本回退
	$git log 查看历史记录
	#git log --pretty=oneline 一行显示log
	$git reset --hard HEAD^   回退到上一个版本，^上一个版本，^^向上2个版本
	$git log 查看历史记录
	$git reset --hard 0123a 回退到那个commit号
	$cat readme.txt 查看文件内容
	$git reflog 记录使用的命令
总结一下：
    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

5)撤销文件
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。	

用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
6）删除文件
￥git rm
7)远程仓库
  1.创建SSHKey。
	 在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：	

		$ ssh-keygen -t rsa -C "youremail@example.com"
	你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	
	2：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

8）添加仓库
	把本地仓库的内容推送到GitHub仓库
	$git remote add origin git@github.com:xxxx/learngit.git
	下一步，就可以把本地库的所有内容推送到远程库上：
	$ git push -u origin master
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

小结

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

学习第2次
1.克隆  
$git clone  git@server-name:path/repo-name.git
2.分支
创建dev分支，切换到dev分支
$git checkout -b  dev
相当于 git branch dev ,git checkout dev
#git branch 查看分支，当前分支*

#git add readme.txt,git commit -m "
#git checkout master 切换到master分支
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
3.master 与分支有冲突
git checkout -b feature1
git add readme.txt
git commit -m "add simple"
git checkout master
git merge feature1

git status
用带参数的git log也可以看到分支的合并情况：
git log --graph --pretty=oneline --abbrev-commit
删除feature1分支：
git branch d-d feature1
git log --graph命令可以看到分支合并图

提交修改
git remote add origin git@github/learngit.git
git push -u origin master
